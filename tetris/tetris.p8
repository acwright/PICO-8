pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
--tetris
--by acwright

--game loop

--t=type
--r=rotation
--
--types
--0=t
--1=rightl
--2=rightz
--3=square
--4=leftz
--5=leftl
--6=line
--
--state
--1=start
--2=game
--3=gameover
--
function _init()
	state=1
end

function _update60()
	if state==1 then
		update_start()
	elseif state==2 then
		update_timer()
		update_controls()
	elseif state==3 then
		update_gameover()
	end
end

function _draw()
	cls()
	if state==1 then
		map(16)
		print("tetris",52,32,7)
		print("by ac wright",40,40,6)
		print("--2019--",48,56,5)
		print("press ‚ùé or üÖæÔ∏è",36,98,7)
	elseif state==2 then
		map(0)
		draw_stack(stack)
		draw_tetramino(t)
		draw_next(n)
		draw_level(level)
		draw_score(score)
	elseif state==3 then
		map(16)
		print("game over!",45,40,6)
		print("press ‚ùé or üÖæÔ∏è",36,98,7)
	end
end

function reset()
	level=1
	timer=60
	score=0
	speed=level
	t=create_next()
	n=create_next()
	stack=create_stack()
end

function update_timer()
	timer-=speed
	if timer<0 then 
		timer=60
		move_down()
		sfx(1)
	end
end

function update_controls()
	if btnp(0) then
		move_left()
	end
	if btnp(1) then
		move_right()
	end
	if btn(2) then
		speed=25
	elseif btn(3) then
		speed=10
	else
		speed=level
	end
	if btnp(4) or btnp(5) then
		rotate()
	end
end

function update_start()
	if btnp(4) or btnp(5) then
		reset()
		state=2
	end
end

function update_gameover()
	if btnp(4) or btnp(5) then
		state=1
	end
end
-->8
--drawing

function draw_stack(stack)
	local y=0
	local x=0
	for _y in all(stack) do
		for _x in all(_y) do
			local mx=map_to_pixel(x)
			local my=map_to_pixel(y)
			spr(_x,mx,my)
			x+=1
		end
		x=0
		y+=1
	end
end

function draw_tetramino(t)
	local y=0
	local x=0
	for _y in all(t.shapes[t.shape]) do
			for _x in all(_y) do
				local mx=map_to_pixel(t.pos.x+x)
				local my=map_to_pixel(t.pos.y+y)
				if _x>0 then spr(t.tile,mx,my) end
				x+=1
			end
			x=0
			y+=1
	end
end

function draw_next(n)
	local my=16
	local mx=104
	spr(n.tile,mx,my)
end

function draw_level(l)
	print(l,106,50)
end

function draw_score(s)
	local thousands=flr((s/1000)%10)
	local hundreds=flr((s/100)%10)
	local tens=flr((s/10)%10)
	local ones=flr(s%10)
	print(thousands,106,80,7)
	print(hundreds,106,88,7)
	print(tens,106,96,7)
	print(ones,106,104,7)
end
-->8
--movements

function rotate()
	if t.shape<4 then
		t.shape+=1
	else
		t.shape=1
	end
end

function move_right()
	move({x=t.pos.x+1,y=t.pos.y})
end

function move_left()
	move({x=t.pos.x-1,y=t.pos.y})
end

function move_down()
	move({x=t.pos.x,y=t.pos.y+1})
end

function move(new_pos)
	local x=0
	local y=0
	for _y in all(t.shapes[t.shape]) do
			for _x in all(_y) do
				if _x>0 then
					if x+new_pos.x>7 then
						return
					elseif x+new_pos.x<0 then
						return
					elseif y+new_pos.y>11 then
						add_to_stack(t)
						t=n
						n=create_next()
						return
					elseif stack[y+new_pos.y+1][x+new_pos.x+1] != 6 then
						if new_pos.y!=t.pos.y then
							add_to_stack(t)
							t=n
							n=create_next()
						end
						if new_pos.y==1 then
							state=3
						end
						return
					end
				end
				x+=1
			end
			x=0
			y+=1
	end
	t.pos=new_pos
end
-->8
--helpers

function create_stack()
	return {
		{6,6,6,6,6,6,6,6},
		{6,6,6,6,6,6,6,6},
		{6,6,6,6,6,6,6,6},
		{6,6,6,6,6,6,6,6},
		{6,6,6,6,6,6,6,6},
		{6,6,6,6,6,6,6,6},
		{6,6,6,6,6,6,6,6},
		{6,6,6,6,6,6,6,6},
		{6,6,6,6,6,6,6,6},
		{6,6,6,6,6,6,6,6},
		{6,6,6,6,6,6,6,6},
		{6,6,6,6,6,6,6,6}
	}
end

function create_next()
	local r=flr(rnd(7))
	if r==0 then
		return init_t()
	elseif r==1 then
		return init_right_l()
	elseif r==2 then
		return init_right_z()
	elseif r==3 then
		return init_square()
	elseif r==4 then
		return init_left_z()
	elseif r==5 then
		return init_left_l()
	elseif r==6 then
		return init_line()
	else
		return init_t()
	end
end

function map_to_pixel(a)
	return (a+2)*8
end

function add_to_stack(t)
	local y=0
	local x=0
	for _y in all(t.shapes[t.shape]) do
			for _x in all(_y) do
				if _x>0 then
					stack[y+t.pos.y+1][x+t.pos.x+1]=t.tile
				end
				x+=1
			end
			x=0
			y+=1
	end
	score_lines()
	remove_lines()
end

function score_lines()
	local tetris=0
	local lines=0
	for _y in all(stack) do
		local complete=true
		for _x in all(_y) do
			if _x==6 then complete=false end
		end
		if complete then
			lines+=1
			tetris+=1
			sfx(0)
		else
			tetris=0
		end
	end
	score+=flr(tetris/4)*100
	score+=lines*10
	level=flr(score/1000)+1
	speed=level
	if score>9999 then
		state=3
	end
end

function remove_lines()
	local new_stack=create_stack()
	local incomplete_stack={}
	for _y in all(stack) do
			local incomplete=false
			for _x in all(_y) do
				if _x==6 then incomplete=true end
			end
			if incomplete then
				add(incomplete_stack,_y)
			end
	end
	reverse(incomplete_stack)
	for y,_y in pairs(incomplete_stack) do
		new_stack[y]=incomplete_stack[y]
	end
	reverse(new_stack)
	stack=new_stack
end

function reverse(arr)
	local i,j=1,#arr
	while i<j do
		arr[i],arr[j]=arr[j],arr[i]
		i=i+1
		j=j-1
	end
end
-->8
--shapes

function init_t()
 return {
		pos={x=3,y=0},
		tile=1,
		shape=1,
		shapes={
			{
				{1,1,1},
				{-1,1,-1}
			},
			{
				{-1,1},
				{1,1},
				{-1,1}
			},
			{
				{-1,1,-1},
				{1,1,1}
			},
			{
				{1,-1},
				{1,1},
				{1,-1}
			}
		}
	}
end

function init_right_l()
	return {
		pos={x=3,y=0},
		tile=2,
		shape=1,
		shapes={
			{
				{1,1,1},
				{-1,-1,1}
			},
			{
				{-1,1},
				{-1,1},
				{1,1}
			},
			{
				{1,-1,-1},
				{1,1,1}
			},
			{
				{1,1},
				{1,-1},
				{1,-1}
			}
		}
	}
end

function init_right_z()
	return {
		pos={x=3,y=0},
		tile=3,
		shape=1,
		shapes={
			{
				{1,1,-1},
				{-1,1,1}
			},
			{
				{-1,1},
				{1,1},
				{1,-1}
			},
			{
				{1,1,-1},
				{-1,1,1}
			},
			{
				{-1,1},
				{1,1},
				{1,-1}
			}
		}
	}
end

function init_square()
	return {
		pos={x=4,y=0},
		tile=1,
		shape=1,
		shapes={
			{
				{1,1},
				{1,1}
			},
			{
				{1,1},
				{1,1}
			},
			{
				{1,1},
				{1,1}
			},
			{
				{1,1},
				{1,1}
			}
		}
	}
end

function init_left_z()
	return {
		pos={x=3,y=0},
		tile=2,
		shape=1,
		shapes={
			{
				{-1,1,1},
				{1,1,-1}
			},
			{
				{1,-1},
				{1,1},
				{-1,1}
			},
			{
				{-1,1,1},
				{1,1,-1}
			},
			{
				{1,-1},
				{1,1},
				{-1,1}
			}
		}
	}
end

function init_left_l()
	return {
		pos={x=3,y=0},
		tile=3,
		shape=1,
		shapes={
			{
				{1,1,1},
				{1,-1,-1}
			},
			{
				{1,1},
				{-1,1},
				{-1,1}
			},
			{
				{-1,-1,1},
				{1,1,1}
			},
			{
				{1,-1},
				{1,-1},
				{1,1}
			}
		}
	}
end

function init_line()
	return {
		pos={x=2,y=0},
		tile=1,
		shape=1,
		shapes={
			{
				{1,1,1,1}
			},
			{
				{1},
				{1},
				{1},
				{1}
			},
			{
				{1,1,1,1}
			},
			{
				{1},
				{1},
				{1},
				{1}
			}
		}
	}
end
__gfx__
000000007cccccc0711111107cccccc0711111107555555000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000c77cccc017711110c77777c0177777105777775000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700c7ccccc017111110c77777c0177777105777775000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000ccccccc011111110c77777c0177777105777775000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000ccccccc011111110c77777c0177777105777775000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700ccccccc011111110c77777c0177777105777775000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccccc011111110ccccccc0111111105555555000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000050550600000000006055050000000000000000005055060060550500000000000000000000000000000000000000000000000000000000000000000
00555555050550665555550066055050555555556666666605055060060550500000000000000000000000000000000000000000000000000000000000000000
05500000050555000000055000555050000000000000000005055060060550500000000000000000000000000000000000000000000000000000000000000000
05005555050555555555005055555050555555555555555505055060060550500000000000000000000000000000000000000000000000000000000000000000
05055555050055555555505055550050555555555555555505055060060550500000000000000000000000000000000000000000000000000000000000000000
05055500055000000055505000000550000000000000000005055060060550500000000000000000000000000000000000000000000000000000000000000000
05055066005555556605505055555500666666665555555505055060060550500000000000000000000000000000000000000000000000000000000000000000
05055060000000000605505000000000000000000000000005055060060550500000000000000000000000000000000000000000000000000000000000000000
__map__
0505050505050505050505050505050505050505050505050505050505050505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0520242424242424242422052024220505050505050505050505050505050505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0526000000000000000027052600270505052024242424242424242424220505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0526000000000000000027052125230505052600000000000000000000270505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0526000000000000000027050505050505052600000000000000000000270505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0526000000000000000027052024220505052600000000000000000000270505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0526000000000000000027052600270505052600000000000000000000270505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0526000000000000000027052125230505052600000000000000000000270505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0526000000000000000027050505050505052125252525252525252525230505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0526000000000000000027052024220505050505050505050505050505050505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0526000000000000000027052600270505050505050505050505050505050505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0526000000000000000027052600270505052024242424242424242424220505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0526000000000000000027052600270505052600000000000000000000270505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0526000000000000000027052600270505052125252525252525252525230505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0521252525252525252523052125230505050505050505050505050505050505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0505050505050505050505050505050505050505050505050505050505050505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000300000f05014050180501c0502005024050200501e0501a0501605000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000800000605000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
