pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
--ldjam
--infinite token

function _init()
	game={}
	init_game()
end

function _update60()
	game.update()
end

function _draw()
	cls()
	game.draw()
end
-->8
--main menu

function init_menu()
	game.update=update_menu
	game.draw=draw_menu
end

function update_menu()
	if btnp(❎) then
		init_game()
	end
end

function draw_menu()
	print("ldjam",54,63,7)
	print("press ❎ to start",32,70,7)
end
-->8
--game

function init_game()
	init_levels()

	player=init_player()
	waves={}
	level=levels[1]
	game.update=update_game
	game.draw=draw_game
end

function update_game()
	level:update()
	player:update()
	for wave in all(waves) do
		wave:update()
	end
end

function draw_game()
	level:draw()
	player:draw()
	for wave in all(waves) do
		wave:draw()
	end
end
-->8
--gameover

function init_gameover()
	game.update=update_gameover
	game.draw=draw_gameover
end

function update_gameover()
	if btnp(❎) then
		init_game()
	end
	if btnp(🅾️) then
		init_menu()
	end
end

function draw_gameover()
	print("press ❎ to restart",30,63,7)
	print("press 🅾️ to go to menu",23,70,7)
end
-->8
--helpers

function mhit(obj,flag)
	local hit=false

	local x1=obj.x/8
	local y1=obj.y/8
	local x2=(obj.x+obj.w-1)/8
	local y2=(obj.y+obj.h-1)/8
	local a=fget(mget(x1,y1),flag)
	local b=fget(mget(x1,y2),flag)
	local c=fget(mget(x2,y2),flag)
	local d=fget(mget(x2,y1),flag)

 hit=a or b or c or d

 return hit
end

function hit(obj1,obj2)
	local hit=false

 local xd=abs((obj1.x+(obj1.w/2))-(obj2.x+(obj2.w/2)))
 local xs=obj1.w*0.5+obj2.w*0.5
 local yd=abs((obj1.y+(obj1.h/2))-(obj2.y+(obj2.h/2)))
 local ys=obj1.h/2+obj2.h/2

 if xd<xs and yd<ys then
  hit=true
 end

 return hit
end
-->8
--objects

function init_player()
	return {
		x=63,
		y=63,
		w=8,
		h=8,
		v=1,
		-- v_x=0,
		-- v_y=0,
		flip_x=false,
		flip_y=false,
		o_sprite=24,
		sprite=24,
		frame=0,
		level=4,
		health=3,
		max_health=0,
		energy=0,
		max_energy=3,
		rest=0,
		rest_period=20,
		holding={left=0,right=0,up=0,down=0},
		update=function(self)
			local lx=self.x
			local ly=self.y

			if btn(0) then
				self.x-=self.v
				-- self.v_x=-1
				self.holding.left+=1
				if (mhit(self,1)) self.x=lx
				for item in all(level.room.items) do
						if hit(self,item) and fget(item.sprite,1) then
							self.x=lx
						end
						if hit(self,item) and fget(item.sprite,2) then
							level.room:unlock()
						end
				end
			else
				--no longer holding
				self.holding.left=0
			end
			if btn(1) then
				self.x+=self.v
				-- self.v_x=1
				self.holding.right+=1
				if (mhit(self,1)) self.x=lx
				for item in all(level.room.items) do
						if hit(self,item) and fget(item.sprite,1) then
							self.x=lx
						end
						if hit(self,item) and fget(item.sprite,2) then
							level.room:unlock()
						end
						if hit(self,item) and fget(item.sprite,3) then
							player:level_up()
						end
				end
			else
				--no longer holding
				self.holding.right=0
			end
			if btn(2) then
				self.y-=self.v
				-- self.v_y=-1
				self.holding.up+=1
				if (mhit(self,1)) self.y=ly
				for item in all(level.room.items) do
						if hit(self,item) and fget(item.sprite,1) then
							self.y=ly
						end
						if hit(self,item) and fget(item.sprite,2) then
							level.room:unlock()
						end
				end
			else
					--no longer holding
					self.holding.up=0
			end
			if btn(3) then
				self.y+=self.v
				-- self.v_y=1
				self.holding.down+=1
				if (mhit(self,1)) self.y=ly
				for item in all(level.room.items) do
						if hit(self,item) and fget(item.sprite,1) then
							self.y=ly
						end
						if hit(self,item) and fget(item.sprite,2) then
							level.room:unlock()
						end
				end
			else
				--no longer holding
				self.holding.down=0
			end
			--longest held direction
			if (self.holding.left>self.holding.right) and (self.holding.left>self.holding.up) and (self.holding.left>self.holding.down) then
				--left
				self.o_sprite=40
				self.flip_x=false
			elseif (self.holding.right>self.holding.up) and (self.holding.right>self.holding.down) then
				--right
				self.o_sprite=40
				self.flip_x=true
			elseif (self.holding.up>self.holding.down) then
				--up
				self.o_sprite=28
				self.flip_y=false
			elseif (self.holding.down>0) then
				--updown
				self.o_sprite=24
				self.flip_y=false
			end

			--frame
			if (self.frame>3) self.frame=0
			self.sprite=self.o_sprite+self.frame
			self.frame+=1

			for item in all(level.room.items) do
					if hit(self,item) and fget(item.sprite,1) then
					 self.x=lx self.y=ly
					end
					if hit(self,item) and fget(item.sprite,2) then
					 level.room:unlock()
					end
			end

			if self.x<-8 then
				local next_dir=level.room.dirs[1]
				if next_dir then
					level.room=level.rooms[next_dir+1]
					self.x=128
				else
					self.x=0
				end
			end
			if self.x>128 then
				local next_dir=level.room.dirs[2]
				if next_dir then
					level.room=level.rooms[next_dir+1]
					self.x=-8
				else
					self.x=120
				end
			end
			if self.y<-8 then
				local next_dir=level.room.dirs[3]
				if next_dir then
					level.room=level.rooms[next_dir+1]
					self.y=120
				else
					self.y=0
				end
			end
			if self.y>128 then
				local next_dir=level.room.dirs[4]
				if next_dir then
					level.room=level.rooms[next_dir+1]
					self.y=-8
				else
					self.y=120
				end
			end
			--actions
			--secondary
			if btnp(4) then
				if self.level>2 and self.energy>=3 then
					add(waves,init_wave(self.x,self.y,1,0,self.level*4))
					add(waves,init_wave(self.x,self.y,-1,0,self.level*4))
					add(waves,init_wave(self.x,self.y,0,1,self.level*4))
					add(waves,init_wave(self.x,self.y,0,-1,self.level*4))
					self.energy-=3
				end
			end
			--primary
			if btnp(5) then
				if (self.energy<1) return
				local v_x=0
				local v_y=0
				if self.o_sprite==24 then
					v_y=1
				elseif self.o_sprite==28 then
					v_y=-1
				elseif(self.o_sprite==40 and self.flip_x == false) then
					v_x=-1
				else
					v_x=1
				end

				local wave=init_wave(self.x,self.y,v_x,v_y,self.level*4)
				add(waves,wave)
				self.energy-=1
			end
			--energy
			if self.energy<self.max_energy then
				self.rest+=1
				if (self.rest==self.rest_period) self.energy+=1 self.rest=0
			end
		end,
		draw=function(self)
			spr(self.sprite,self.x,self.y,1,1,self.flip_x,self.flip_y)
			local health=''
			for i=1,self.health do
				health=health..'♥'
			end
			print(health,1,1,8)
			local energy=''
			for i=1,self.energy do
				energy=energy..'◆'
			end
			print(energy,1,8,12)
			--print('     energy',8,8,8)
		end
	}
end

function init_level1()
	rooms={}

	local room_0=init_room()
	room_0.mapn=0
	room_0.dirs={1,1,2,2}
	room_0.items={
		init_item(3,2,16),
		init_item(7,15,6),
		init_item(8,15,7),
		init_item(12,10,38),
		init_item(13,12,48),
		init_item(4,3,49),
		init_item(6,2,50),
		init_item(8,1,51)
	}

	local room_1=init_room()
	room_1.mapn=0
	room_1.dirs={1,2,2,1}
	room_1.items={
		init_item(3,5,16),
		init_item(4,11,32),
		init_item(14,14,32),
		init_enemy(10,11,96)
	}

	add(rooms,room_0)
	add(rooms,room_1)
end

function init_room()
	return {
		mapn=0,
		dirs={},
		items={},
		unlock=function(self)
			for item in all(self.items) do
 			if fget(item.sprite,3) then
  			del(self.items,item)
 			end
			end
		end,
		update=function(self)
			for item in all(self.items) do
				item:update()
			end
		end,
		draw=function(self)
			local my=flr(self.mapn/8)*16
			local mx=(self.mapn-(flr(self.mapn/8)*8))*16

			map(mx,my)

			for item in all(self.items) do
				item:draw()
			end
		end
	}
end

function init_item(x,y,sprite)
	return {
		x=x*8,
		y=y*8,
		w=8,
		h=8,
		sprite=sprite,
		update=function(self)

		end,
		draw=function(self)
			spr(self.sprite,self.x,self.y)
		end
	}
end

function init_enemy(x,y,sprite)
	return {
		x=x*8,
		y=y*8,
		w=8,
		h=8,
		vx=1,
		vy=1,
		sprite=sprite,
		update=function(self)
			self.x+=self.vx
			self.y+=self.vy

			if(mhit(self,1)) self.vx=-self.vx self.vy=-self.vy
		end,
		draw=function(self)
			spr(self.sprite,self.x,self.y)
		end
	}
end

function init_wave(x,y,v_x,v_y,life)
	return {
		sprite=13,
		alt_sprite=false,
		x=x,
		y=y,
		v=2,
		v_x=v_x,
		v_y=v_y,
		flip_x=false,
		flip_y=false,
		life=life,
		update=function(self)
			self.x+=(self.v*self.v_x)
			self.y+=(self.v*self.v_y)
		 self.life-=1
			if self.alt_sprite then
				self.sprite=13
				self.alt_sprite=false
			else
				self.alt_sprite=true
				if self.v_x == 1 then
					self.sprite=15
				elseif self.v_x == -1 then
					self.sprite=15
					self.flip_x=true
				elseif self.v_y == 1 then
					self.sprite=14
					self.flip_y=true
				else
					self.sprite=14
				end
			end
			if self.life==0 then
				del(waves,self)
			end
		end,
		draw=function(self)
			spr(self.sprite,self.x,self.y,1,1,self.flip_x,self.flip_y)
		end
	}
end

function init_up_elevator(level)
	return {
		x=48,
		y=56,
		w=8,
		h=8,
		level=level,
		update=function(self)

		end,
		draw=function(self)
			spr(32,self.x,self.y)
		end
	}
end

function init_down_elevator(level)
	return {
		x=72,
		y=56,
		w=8,
		h=8,
		level=level,
		update=function(self)

		end,
		draw=function(self)
			spr(32,self.x,self.y,1,1,false,true)
		end
	}
end
-->8
--levels

function init_levels()
	levels={
		init_level1()
	}
end

function init_level1()
	local level={
		room=nil,
		rooms={}
	}

	local room_0=init_room()
	room_0.mapn=1
	room_0.dirs={nil,nil,nil,2}
	room_0.items={
		init_up_elevator(2)
	}

	local room_1=init_room()
	room_1.mapn=0
	room_1.dirs={nil,nil,nil,3}
	room_1.items={}

	local room_2=init_room()
	room_2.mapn=3
	room_2.dirs={nil,nil,0,4}
	room_2.items={}

	local room_3=init_room()
	room_3.mapn=3
	room_3.dirs={nil,nil,1,7}
	room_3.items={}

	local room_4=init_room()
	room_4.mapn=0
	room_4.dirs={nil,5,2,nil}
	room_4.items={}

	local room_5=init_room()
	room_5.mapn=2
	room_5.dirs={4,6,nil,nil}
	room_5.items={}

	local room_6=init_room()
	room_6.mapn=2
	room_6.dirs={5,7,nil,nil}
	room_6.items={}

	local room_7=init_room()
	room_7.mapn=6
	room_7.dirs={6,8,3,nil}
	room_7.items={}

	local room_8=init_room()
	room_8.mapn=12
	room_8.dirs={7,nil,nil,9}
	room_8.items={}

	local room_9=init_room()
	room_9.mapn=7
	room_9.dirs={nil,10,8,16}
	room_9.items={}

	local room_10=init_room()
	room_10.mapn=2
	room_10.dirs={9,11,nil,nil}
	room_10.items={}

	local room_11=init_room()
	room_11.mapn=0
	room_11.dirs={10,nil,nil,nil}
	room_11.items={}

	local room_12=init_room()
	room_12.mapn=11
	room_12.dirs={nil,13,nil,17}
	room_12.items={}

	local room_13=init_room()
	room_13.mapn=4
	room_13.dirs={12,14,nil,18}
	room_13.items={}

	local room_14=init_room()
	room_14.mapn=4
	room_14.dirs={13,15,nil,19}
	room_14.items={}

	local room_15=init_room()
	room_15.mapn=4
	room_15.dirs={14,16,nil,20}
	room_15.items={}

	local room_16=init_room()
	room_16.mapn=10
	room_16.dirs={15,nil,9,nil}
	room_16.items={}

	local room_17=init_room()
	room_17.mapn=0
	room_17.dirs={nil,nil,12,nil}
	room_17.items={}
-- test
	local room_18=init_room()
	room_18.mapn=0
	room_18.dirs={nil,nil,13,nil}
	room_18.items={
		init_item(3,2,16),
		init_item(7,15,6),
		init_item(8,15,7),
		init_item(12,10,38),
		init_item(13,12,48),
		init_item(4,3,49),
		init_item(6,2,50),
		init_item(8,1,51)
	}

	local room_19=init_room()
	room_19.mapn=0
	room_19.dirs={nil,nil,14,nil}
	room_19.items={}

	local room_20=init_room()
	room_20.mapn=0
	room_20.dirs={nil,nil,15,nil}
	room_20.items={}

	add(level.rooms,room_0)
	add(level.rooms,room_1)
	add(level.rooms,room_2)
	add(level.rooms,room_3)
	add(level.rooms,room_4)
	add(level.rooms,room_5)
	add(level.rooms,room_6)
	add(level.rooms,room_7)
	add(level.rooms,room_8)
	add(level.rooms,room_9)
	add(level.rooms,room_10)
	add(level.rooms,room_11)
	add(level.rooms,room_12)
	add(level.rooms,room_13)
	add(level.rooms,room_14)
	add(level.rooms,room_15)
	add(level.rooms,room_16)
	add(level.rooms,room_17)
	add(level.rooms,room_18)
	add(level.rooms,room_19)
	add(level.rooms,room_20)

	level.room=level.rooms[19]
	level.update=function(self)
		self.room:update()
	end
	level.draw=function(self)
		self.room:draw()
	end

	return level
end
__gfx__
0000000011111111111111111111111111111bb11bb1111100500500005005000111111003000300000660000000000000000000000000000000000000000000
0000000011111111111111111111111111111bb11bb1111110510510015015011100001130333030000660000400004005005005000000000000000000000000
00700700111111111111111111111111111112bbbb21111155555555555555551006600103000303006666000044440050050050000000000000000000000000
0007700011111111111111111111111111111bb22bb11111005005000050050010600601300300300077a7000045540050050050000000000000000000000000
0007700011112b1bb0220bb0b1b21111b0220bb00bb0220b105105100150150110600601303030300779a7700044440005555500000000000000000000000000
00700700111120bbbb00bbbbbb021111bb00bbbbbbbb00bb555555555555555510066001303003030779a7700045540000444000000000000000000000000000
00000000111112bb0bbbb00bbb2111110bbbb00bb00bbbb000500500005005001100001103033030077777700044440000444000000000000000000000000000
000000001111bb0020bb022000bb111120bb02200220bb0210510510015015010111111000300300007777000400004000444000000000000000000000000000
111111111111bb0222222212bb02111120bb02200220bb02015015101051050100aaa000000aaa0000aaa000000aaa0000099900009990000009990000999000
1111111111110bb0222212220bb011110bbbb00bb00bbbb010510501015015100aacaa0000aacaa00aacaa0000aacaa000a999a00a999a0000a999a00a999a00
11111111111120bb2222222220bb1111bb00bbbbbbbb00bb055555501555555100aaa000000aaa0000aaa009900aaa0000099900009990009009990000999009
11111111111120bb2222222220bb1111b0220bb00bb0220b105105010150151000030009000030000003000330003009900aaa0000aaa000300aaa0090aaa003
1111111111110bb0212222220bb0111111111bb22bb1111101501510105105010003333333333000000333333333300333333000000333333333300030033333
111111111111bb0222222222bb021111111112bbbb21111115555551055555503333300090033333333330000003333300033333333330090003333333333000
111111111111bb0212222222bb02111111111bb11bb1111101501510105105019003300000033009900330000003300000033009900330000003300900033000
1111111111110bb0222222220bb0111111111bb11bb1111110510501015015100003300000033000000330000003300000033000000330000003300000033000
222bb2221111bbb00b0bb0bb00bb1111222222112222221200000000006660000000a0000000a0000000a0000000a00000444000004440000044400000000000
21bbbb2211111bb0bbbb00bbbb211111222112222222121200000000066566000000a9000000a9000000a9000000a900044c4400044c44000448440004000000
2bbbbbb21111b02bb00bbbb0bb02111122222222222212220444000000666000000ca900000ca900000ca900000ca90000444000004440000044400044400000
2b2bb2b21111221b0220bb02b1b211112122222222222222c0443333000000080000a9000000a9000000a9090000a909000300090003000a0003000848480000
222bb22211111111111111111111111121222222211222220c040000000000000090a3330000a3330000a3330090a33300033333000334440003344444488000
122bb222111111111111111111111111222222222222222200c00000000000000033330900333309003333000033330033333000444330004443300004088000
222bb212111111111111111111111111122222221122222200000000800000000000330000903300009033000000330090033000900330008003300044488008
22222222111111111111111111111111122222222222222200000000000000000000330000003300000033000000330000033000000330000003300080088444
0333444003334440033344400333000000000000000000000000000b090909090000000000eeee0000eeee000000000000000000000ee000000ee00000000000
033c0440033c0440033c0440033044400000000000000000004444bb9090909000eeee00eee00eeeeee00eee00000000000ee00000eeee0000eeee0000000000
0330c0400330c0400330c040033c0440000000000000000004404bb0090aaa09eee00eeee0e00e0ee0e00e0e00eeee0000eeee000e0ee0e00e0ee0e000eeee00
ffff0c00ffff0c00ffff0c00ffffc040999999990000000044400b4490aaaaa0e0e00e0ee0e00e0e00000000eeeeeeee0e0ee0e0000ee000000000000e0ee0e0
f00ff0fff00ff0fff00ff0ff00000c00099559900004400040040b0409aaaaa9e0e00e0ee0e00e0e00000000eeeeeeee0e0ee0e0000ee000000000000e0ee0e0
0f00fff00f00fff00000fff000000000095995900044440044f0004490aaaaa0eee00eeee0e00e0ee0e00e0e00eeee0000eeee000e0ee0e00e0ee0e000eeee00
f00f0000f00f00000000000000000000099559900444444004f4f440090aaa0900eeee00eee00eeeeee00eee00000000000ee00000eeee0000eeee0000000000
0000f00f0000000000000000000000000099990044444444ff444ff0909090900000000000eeee0000eeee000000000000000000000ee000000ee00000000000
99900999009009000099990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
05000050090000900900009009999990000000000000000000000000000000000000d444444d00000000d444444d00000000d444444d00000000d444444d0000
05555550955555599555555995555559000000000000000000000000000000000000d444444d00000000d444444d00000000d444444d00000000d444444d0000
5caeeac55caeeac55caeeac55caeeac5999905059909050509000505000005050000dd0000dd00000000dd0000dd00000000dd0000dd00000000dd0000dd0000
eaceecaeeaceecaeeaceecaeeaceecae9095eeac9095eeac0095eeac0995eeac00000dddddd0000000000dddddd0000000000dddddd0000000000dddddd00000
ecaaaaceecaaaaceecaaaaceecaaaace900aacee000aacee000aacee090aacee0000000dd00000000000000dd00000000000000dd00000000000000dd0000000
0eceece00eceece00eceece00eceece0909acaca909acaca009acaca099acaca0000000dd00000000000000dd00000000000000dd00000000000000dd0000000
500aa005500aa005500aa005500aa005999905059909050509000505000005050000000dd00000000000000dd00000000000000dd00000000000000dd0000000
00000000000000000888000008880000000000000000000000000000008080800000000dd00000000000000dd00000000000000dd00000000000000dd0000000
00000070000800700000807080008070000070000000700000087800080878080000000dd00000000000000dd00000000000000dd00000000000000dd0000000
00000777000087770888077708880777000777000007870000078700008787800000000dd00000000000000dd00000000000000dd00000000000000dd0000000
00055577000850770000857780008577000050000000500000085800080858080005555555555000000555555555500000055555555550000005555555555000
00050070000050700888057008880570000050000000500000005000008080800005555555555000000555555555500000055555555550000005555555555000
00050660000006600000066080000660000666000006660000066600080687080005555555555000000555555555500000055555555550000005555555555000
00000666000006660000066600000666000666000006660000066600000666000000555555550000000055555555000000005555555500000000555555550000
00000666000006660000066600000666000666000006660000066600000666000000005555000000000000555500000000000055550000000000005555000000
__gff__
0002020202020a0a02020202020000000202000202020a0a0000000000000000800202020000040400000000000000000404040402020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0102020202020412120502020202020301020202020204121205020202020203010202020202020202020202020202030102020202031112121301020202020301020202020202020202020202020203010202020202041212130102020202030102020202020412120502020202020301020202020311121205020202020203
1112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212131112121311121212121311121212121212121212121212121213111212121212121212131112121212131112121212121212121212121212121311121212121311121212121212121213
1112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212131112121311121212121311121212121212121212121212121213111212121212121212131112121212131112121212121212121212121212121311121212121311121212121212121213
1112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212131112121311121212121311121212121212121212121212121213111212121212121212131112121212131112121212121212121212121212121311121212121311121212121212121213
1112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212131112121311121212121311121212121212121212121212121213111212121212121212131112121212131112121212121212121212121212121311121212121311121212121212121213
1112121212121212121212121212121311121212121212121212121212121213212222222222141212152222222222231112121212131112121311121212121321222222222214121215222222222223111212121212121212131112121212131112121212121212121212121212121311121212121311121212121212121213
0412121212121212121212121212120504121212121522141522141212121205020202020202041212050202020202021112121212050412120504121212121302020202020204121205020202020202041212121212121212050412121212130412121212121212121212121212120511121212120504121212121212121205
1212121212121212121212121212121212121212121312111312111212121212121212121212121212121212121212121112121212121212121212121212121312121212121212121212121212121212121212121212121212121212121212131212121212121212121212121212121211121212121212121212121212121212
1212121212121212121212121212121212121212120512040512041212121212121212121212121212121212121212121112121212121212121212121212121312121212121212121212121212121212121212121212121212121212121212131212121212121212121212121212121211121212121212121212121212121212
1412121212121212121212121212121514121212121212121212121212121215222222222222141212152222222222221112121212151412121514121212121314121212121212121212121212121215141212121212121212151412121212132222222222221412121522222222222211121212121514121212121212121215
1112121212121212121212121212121311121212121212121212121212121213010202020202041212050202020202031112121212131112121311121212121311121212121212121212121212121213111212121212121212131112121212130102020202020412120502020202020311121212121311121212121212121213
1112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212131112121311121212121311121212121212121212121212121213111212121212121212131112121212131112121212121212121212121212121311121212121311121212121212121213
1112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212131112121311121212121311121212121212121212121212121213111212121212121212131112121212131112121212121212121212121212121311121212121311121212121212121213
1112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212131112121311121212121311121212121212121212121212121213111212121212121212131112121212131112121212121212121212121212121311121212121311121212121212121213
1112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212131112121311121212121311121212121212121212121212121213111212121212121212131112121212131112121212121212121212121212121311121212121311121212121212121213
2122222222221412121522222222222321222222222214121215222222222223212222222222222222222222222222232122222222221112121321222222222321222222222214121215222222222223212222222222141212132122222222232122222222222222222222222222222321222222222211121215222222222223
0102020202020412120502020202020301020202020204121205020202020203010202020202041212050202020202030102020202020202020202020202020301020202020202020202020202020203010202020202041212050202020202030102020202020202020202020202020301020202020202020202020202020203
1112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121212121212121212121212121213
1112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121212121212121212121212121213
1112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121223222222222222222221121213
1112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121213101010101010101011121213
1112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121213101010101010101011121213
0412121212121212121212121212120511121212121212121212121212121205041212121212121212121212121212131112121212121212121212121212120504121212121212121212121212121213111212121212121212121212121212130412121212121212121212121212121311121213101010101010101011121213
1212121212121212121212121212121211121212121212121212121212121212121212121212121212121212121212131112121212121212121212121212121212121212121212121212121212121213111212121212121212121212121212131212121212121212121212121212121311121213101010101010101011121213
1212121212121212121212121212121211121212121212121212121212121212121212121212121212121212121212131112121212121212121212121212121212121212121212121212121212121213111212121212121212121212121212131212121212121212121212121212121311121213101010101010101011121213
1412121212121212121212121212121511121212121212121212121212121215141212121212121212121212121212131112121212121212121212121212121514121212121212121212121212121213111212121212121212121212121212131412121212121212121212121212121311121203020202020202020201121213
1112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121212121212121212121212121213
1112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121222222222222222222221121213
1112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121213101010101010101011121213
1112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121203020202020202020201121213
1112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121212121212121212121212121213111212121212121212121212121212131112121212121212121212121212121311121212121212121212121212121213
2122222222221412121522222222222321222222222222222222222222222223212222222222222222222222222222232122222222221412121522222222222321222222222214121215222222222223212222222222222222222222222222232122222222222222222222222222222321222222222222222222222222222223
